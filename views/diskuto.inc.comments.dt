- import diskuto.userstore : StoredUser;
- import diskuto.web : DiskutoWeb;
- import diskuto.internal.webutils : Comment, User, getCommentsContext;
- import vibe.web.web : trWeb;
- import core.time : minutes;
- import fuzzydate : toFuzzyDate;

- void commentForm(string topic, ref User user, Comment* comment)
	- if (user.role >= StoredUser.Role.commenter)
		form.reply-form(method="POST", action="#{req.rootDir}diskuto", onSubmit="return confirmReply(this)")
			input(type="hidden", name="topic", value=topic)
			input(type="hidden", name="reply_to", value=comment ? comment.id : "")
			- auto ph = comment ? trWeb("Type here to reply.") : trWeb("Type here to leave a comment.");
			textarea(name="text", rows=3, placeholder=ph, onfocus="updateFormSnap(this)", onblur="updateFormSnap(this)", onchange="updateFormSnap(this)", onkeydown="updateFormSnap(this)", onkeyup="updateFormSnap(this)", autocomplete="off")
			input(type="text", name="name", value=user.name, placeholder=trWeb("Name (optional)"), disabled=user.registered)
			input(type="text", name="email", value=user.email, placeholder=trWeb("Email (optional)"), title=trWeb("Used for notifications and avatar image only"), disabled=user.registered)
			input(type="text", name="website", value=user.website, placeholder=trWeb("Website (optional)"), disabled=user.registered)
			button(type="submit")& Submit

- void renderCommentRec(string topic, DiskutoWeb web, ref User usr, Comment* comment)
	.comment(id=comment.id)
		- import diskuto.avatar : generateAvatar;
		- import diskuto.commentstore : StoredComment;
		- import std.algorithm.searching : canFind;

		- generateAvatar(&_diet_output, comment.avatarID);
		.right
			- if (comment.website.length && comment.name.length)
				a.author(href=comment.website)= comment.name
			- else if (comment.name.length)
				span.author= comment.name
			- else
				span.author& Anonymous
			a.date(href="\##{comment.id}", title=comment.time)= toFuzzyDate(comment.time)

			- final switch (comment.status) with (StoredComment)
				- case Status.active: break;
				- case Status.disabled:
					.comment-status& This comment has been deactivated
					- break;
				- case Status.awaitsModeration:
					.comment-status& This comment is still waiting for a moderator to be approved
					- break;
				- case Status.spam:
					.comment-status& This comment has been flagged as spam
					- break;
				- case Status.deleted:
					.comment-status& This comment has been deleted
					- break;

			include diskuto.inc.commentContents

			.error

			form.edit(method="POST", action="#{req.rootDir}ts/edit", onSubmit="return confirmEdit(this)")
				input(type="hidden", name="id", value=comment.id)
				textarea(name="text", rows=3, autocomplete="off")= comment.text
				button(type="button", onClick="cancelEdit(this)")& Cancel
				button(type="submit")& Submit

			form.delete(method="POST", action="#{req.rootDir}ts/delete", onSubmit="return confirmDelete(this)")
				input(type="hidden", name="id", value=comment.id)
				p& Do you really want to delete this comment?
				button(type="button", onClick="cancelDelete(this)")& Cancel
				button(type="submit")& Confirm

		.action-bar
			- bool have_upvoted = usr.id.length && comment.upvotes.canFind(usr.id);
			- bool have_downvoted = usr.id.length && comment.downvotes.canFind(usr.id);
			- bool downvote_disabled = have_downvoted || comment.author == usr.id;
			- bool upvote_disabled = have_upvoted || comment.author == usr.id;
			- auto vote_total = cast(long)comment.upvotes.length - cast(long)comment.downvotes.length;

			- if (usr.role >= StoredUser.Role.member)
				.voting
					form.vote-up(method="POST", action="#{req.rootDir}diskuto/up", onSubmit="return vote(this, 1)")
						input(type="hidden", name="id", value=comment.id)
						button(type="submit", disabled=upvote_disabled, class=have_upvoted ? "chosen" : ""): arrow.up
					.vote-count(class=vote_total<0?"neg":vote_total>0?"pos":"bal")= vote_total
					form.vote-down(method="POST", action="#{req.rootDir}diskuto/down", onSubmit="return vote(this, -1)")
						input(type="hidden", name="id", value=comment.id)
						button(type="submit", disabled=downvote_disabled, class=have_downvoted ? "chosen" : ""): arrow.down

			- if (usr.role >= StoredUser.Role.commenter && comment.author == usr.id && comment.age < web.settings.softEditTimeLimit || usr.isModerator)
				button.edit-button(type="button", onClick="showEdit(this)")& Edit
				button.delete-button(type="button", onClick="showDelete(this)")& Delete

			- if (usr.isModerator)
				- if (comment.status == StoredComment.Status.active)
					button(type="button", onClick="setStatus(this, 'spam')")& Spam
					button(type="button", onClick="setStatus(this, 'disabled')")& Deactivate
				- else
					button(type="button", onClick="setStatus(this, 'active')")& Activate

			- commentForm(topic, usr, comment);

		.replies
			- foreach (c; comment.replies)
				- if (usr.isModerator || c.isVisibleTo(usr.id))
					- renderCommentRec(topic, web, usr, c);

- void includeDiskuto(DiskutoWeb web, string topic, string base_path = null)
	- import vibe.data.json : Json;
	- if (!base_path.length)
		- base_path = web.getBasePath(req.rootDir);

	.diskuto(diskuto:topic=topic, diskuto:base=base_path)
		- auto ctx = getCommentsContext(req, web, topic);
		- auto usr = ctx.user;

		style @import url('#{base_path}/diskuto.css');
		script(src="#{base_path}/diskuto.js")
		noscript: style @import url('#{base_path}/diskuto-noscript.css');

		p& #{ctx.commentCount} comments

		.error= req.query.get("diskuto-error", "")

		- commentForm(topic, usr, null);

		- if (usr.isModerator)
			form(method="POST", action="#{req.rootDir}diskuto/mark_all_as_spam")
				input(type="hidden", name="topic", value=topic)
				input#confirm_all_spam(type="checkbox", name="confirmed")
				label(for="confirm_all_spam") Confirm marking of all comments in this topic as spam
				button(type="submit") Mark all comments as spam (!)


		.replies
			- foreach (c; ctx.comments)
				- if (usr.isModerator || c.isVisibleTo(usr.id))
					- renderCommentRec(topic, web, usr, c);
